{"name": "test_voice_search_no_mic", "status": "broken", "statusDetails": {"message": "TypeError: 'int' object is not iterable", "trace": "request = <SubRequest 'run_allure' for <Function test_open_search_not_found>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def run_allure(request):\n        yield\n        print(\"going to run allure...\")\n        POWERSHELL_PATH = \"powershell\"  # POWERSHELL EXE PATH\n        ps_script_path = \"./run_powershell.ps1\"  # YOUR POWERSHELL FILE PATH\n        commandline_options = subprocess.call(\n            [\n                \"powershell\",\n                \"-File\", ps_script_path\n            ])\n>       process_result = subprocess.run(commandline_options, stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                                        universal_newlines=True)  # CALL PROCESS\n\nbrowserTest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:489: in run\n    with Popen(*popenargs, **kwargs) as process:\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:854: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:1247: in _execute_child\n    args = list2cmdline(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nseq = 0\n\n    def list2cmdline(seq):\n        \"\"\"\n        Translate a sequence of arguments into a command line\n        string, using the same rules as the MS C runtime:\n    \n        1) Arguments are delimited by white space, which is either a\n           space or a tab.\n    \n        2) A string surrounded by double quotation marks is\n           interpreted as a single argument, regardless of white space\n           contained within.  A quoted string can be embedded in an\n           argument.\n    \n        3) A double quotation mark preceded by a backslash is\n           interpreted as a literal double quotation mark.\n    \n        4) Backslashes are interpreted literally, unless they\n           immediately precede a double quotation mark.\n    \n        5) If backslashes immediately precede a double quotation mark,\n           every pair of backslashes is interpreted as a literal\n           backslash.  If the number of backslashes is odd, the last\n           backslash escapes the next double quotation mark as\n           described in rule 3.\n        \"\"\"\n    \n        # See\n        # http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n        # or search http://msdn.microsoft.com for\n        # \"Parsing C++ Command-Line Arguments\"\n        result = []\n        needquote = False\n>       for arg in map(os.fsdecode, seq):\nE       TypeError: 'int' object is not iterable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:549: TypeError"}, "start": 1594292587092, "stop": 1594292597616, "uuid": "9d347c73-e39f-420e-a483-4f382979a19c", "historyId": "888fdf14480002ab009283402d632466", "testCaseId": "60de132db551c75e43c332edd1e0b147", "fullName": "browserTest.Test_URL_Chrome#test_voice_search_no_mic", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('chrome_driver_init')"}, {"name": "suite", "value": "browserTest"}, {"name": "subSuite", "value": "Test_URL_Chrome"}, {"name": "host", "value": "T-P-YOSEFEV-WW"}, {"name": "thread", "value": "9620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "browserTest"}]}