{"name": "test_voice_search_no_mic", "status": "broken", "statusDetails": {"message": "TypeError: bufsize must be an integer", "trace": "@pytest.fixture(scope=\"session\", autouse=True)\n    def run_allure():\n        yield\n        print(\"going to run allure...\")\n        # result = subprocess.run([r'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe', r'./run_powershell.ps1'],\n        #                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)\n>       subprocess.call('C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe', 'allure serve C:\\\\Users\\\\yosefev\\\\IdeaProjects\\\\TheBasics\\\\Sellenium\\\\my_allure_results')\n\nbrowserTest.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:340: in call\n    with Popen(*popenargs, **kwargs) as p:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x053E6508>\nargs = 'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\nbufsize = 'allure serve C:\\\\Users\\\\yosefev\\\\IdeaProjects\\\\TheBasics\\\\Sellenium\\\\my_allure_results'\nexecutable = None, stdin = None, stdout = None, stderr = None, preexec_fn = None\nclose_fds = True, shell = False, cwd = None, env = None\nuniversal_newlines = None, startupinfo = None, creationflags = 0\nrestore_signals = True, start_new_session = False, pass_fds = ()\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=True,\n                 shell=False, cwd=None, env=None, universal_newlines=None,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, encoding=None, errors=None, text=None):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n    \n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n>           raise TypeError(\"bufsize must be an integer\")\nE           TypeError: bufsize must be an integer\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38-32\\lib\\subprocess.py:753: TypeError"}, "start": 1594294719046, "stop": 1594294729587, "uuid": "e1979c03-8cd9-48e1-b8c5-c553a2e363eb", "historyId": "888fdf14480002ab009283402d632466", "testCaseId": "60de132db551c75e43c332edd1e0b147", "fullName": "browserTest.Test_URL_Chrome#test_voice_search_no_mic", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('chrome_driver_init')"}, {"name": "suite", "value": "browserTest"}, {"name": "subSuite", "value": "Test_URL_Chrome"}, {"name": "host", "value": "T-P-YOSEFEV-WW"}, {"name": "thread", "value": "20904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "browserTest"}]}